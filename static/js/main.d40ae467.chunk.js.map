{"version":3,"sources":["components/Card.js","components/Deck.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","deg","Math","random","_transform","className","style","transform","this","src","image","alt","name","React","Component","Deck","state","deck","drawn","getCard","bind","axios","get","setState","data","deck_id","cardURL","cardRes","success","Error","card","cards","prevState","id","code","value","suit","alert","map","key","onClick","App","role","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iTAmBeA,G,uDAfX,WAAYC,GAAQ,IAAD,sBACf,cAAMA,GACN,IAAMC,EAAsB,GAAhBC,KAAKC,SAAe,GAFjB,OAGf,EAAKC,WAAL,iBAA4BH,EAA5B,QAHe,E,qDAOf,OACI,yBAAKI,UAAU,OAAOC,MAAO,CAACC,UAAWC,KAAKJ,aAC3C,yBAAKK,IAAKD,KAAKR,MAAMU,MAAOC,IAAKH,KAAKR,MAAMY,Y,GAVvCC,IAAMC,YCuDXC,E,kDAnDX,WAAYf,GAAQ,IAAD,8BACf,cAAMA,IACDgB,MAAQ,CAAEC,KAAM,KAAMC,MAAO,IAClC,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBAHA,E,gMAOEC,IAAMC,IAAN,UAVJ,sCAUI,kB,OAAbL,E,OACJT,KAAKe,SAAS,CAACN,KAAMA,EAAKO,O,mQAIxBC,EAAUjB,KAAKQ,MAAMC,KAAKQ,Q,SAExBC,E,UAjBS,sC,YAiBoBD,E,mBACbJ,IAAMC,IAAN,UAAaI,I,WAA7BC,E,QACSH,KAAKI,Q,sBACV,IAAIC,MAAM,kE,OAEdC,EAAOH,EAAQH,KAAKO,MAAM,GAC9BvB,KAAKe,UAAS,SAAAS,GAAS,MAAM,CACzBd,MAAM,GAAD,mBACEc,EAAUd,OADZ,CAED,CACIe,GAAIH,EAAKI,KACTxB,MAAOoB,EAAKpB,MACZE,KAAK,GAAD,OAAIkB,EAAKK,MAAT,eAAqBL,EAAKM,a,kDAKxCC,MAAM,EAAD,I,+IAKP,IAAMN,EAAQvB,KAAKQ,MAAME,MAAMoB,KAAI,SAAAR,GAAI,OACnC,kBAAC,EAAD,CAAMlB,KAAMkB,EAAKlB,KAAMF,MAAOoB,EAAKpB,MAAO6B,IAAKT,EAAKG,QAGxD,OACI,yBAAK5B,UAAU,QACZ,4BAAQmC,QAAShC,KAAKW,SAAtB,cACA,yBAAKd,UAAU,cACZ0B,Q,GA7CClB,IAAMC,WCWV2B,MAbf,WACE,OACE,yBAAKpC,UAAU,OACb,4BACI,0BAAMqC,KAAK,MAAMC,aAAW,cAA5B,kBADJ,cAGI,0BAAMD,KAAK,MAAMC,aAAW,cAA5B,mBAEJ,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d40ae467.chunk.js","sourcesContent":["import React from 'react';\nimport '../assets/style/App.scss';\n\nclass  Card extends React.Component {\n    constructor(props) {\n        super(props)\n        const deg = Math.random() * 90 -45\n        this._transform = `rotate(${deg}deg)`\n    }\n\n    render() {\n        return (\n            <div className=\"Card\" style={{transform: this._transform}} >\n               <img src={this.props.image} alt={this.props.name} />\n            </div>\n        )\n    }\n}\n\nexport default Card","import React from 'react';\nimport axios from 'axios';\nimport Card from './Card'\nimport '../assets/style/App.scss';\nconst API_URL_BASE = 'https://deckofcardsapi.com/api/deck'\n\nclass Deck extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { deck: null, drawn: [] }\n        this.getCard = this.getCard.bind(this)\n    }\n\n    async componentDidMount() {\n        let deck = await axios.get(`${API_URL_BASE}/new/shuffle/`)\n        this.setState({deck: deck.data})\n    }\n\n    async getCard() {\n      let deck_id = this.state.deck.deck_id\n      try {\n        let cardURL = `${API_URL_BASE}/${deck_id}/draw/` \n        let cardRes = await axios.get(`${cardURL}`)\n        if (!cardRes.data.success) {\n          throw new Error('No more cards on this deck! Reload the page to get a new deck.')\n        }\n        let card = cardRes.data.cards[0]\n        this.setState(prevState =>  ({\n            drawn: [\n                ...prevState.drawn,\n                {\n                    id: card.code,\n                    image: card.image,\n                    name:`${card.value} of ${card.suit}`\n                }\n            ]\n        }))\n      } catch (err) {\n          alert(err)\n      }\n    }\n\n    render() {\n        const cards = this.state.drawn.map(card => (\n            <Card name={card.name} image={card.image} key={card.id} />\n        )); \n        \n        return (\n            <div className='Deck'>\n               <button onClick={this.getCard} >Get a Card</button>\n               <div className='Deck-cards'>\n                 {cards}\n               </div>\n            </div>\n        )\n    }\n}\n\nexport default Deck","import React from 'react';\nimport Deck from './components/Deck';\nimport './assets/style/App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1> \n          <span role='img' aria-label=\"Spade Suit\"> ♠️ </span> \n          Card Picker \n          <span role='img' aria-label=\"Spade Suit\"> ♠️ </span> \n      </h1>\n      <Deck />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}